// This is your Prisma schema file

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Employee {
  id            String      @id @default(uuid())
  matricule     String      @unique
  nom           String
  dateNaissance String
  lieuNaissance String
  sexe          String
  matrimoniale  String
  diplome       String
  contrat       String
  statutPro     String
  grade         String
  corpsMetier   String
  competences   String
  infosSupp     String
  position      String
  service       Service
  email         String      @unique
  phone         String
  equipment     Equipment[] @relation("AssignedEquipment")
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Equipment {
  id          String    @id @default(uuid())
  code        String    @unique
  name        String
  type        String
  service     Service
  status      String
  assignedTo  Employee? @relation("AssignedEquipment", fields: [employeeId], references: [id])
  employeeId  String?
  nombre      String
  dateInstall String
  etatBien    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Procedure {
  id            String         @id @default(uuid())
  title         String
  service       Service
  steps         Json
  lastUpdated   DateTime       @updatedAt
  createdAt     DateTime       @default(now())
  notifications Notification[]
}

model Notification {
  id             String    @id @default(uuid())
  procedure      Procedure @relation(fields: [procedureId], references: [id])
  procedureId    String
  procedureTitle String
  requesterName  String
  requesterEmail String
  status         String
  type           String
  message        String?
  description    String?
  createdAt      DateTime  @default(now())
}

model User {
  id        String   @id @default(uuid())
  username  String   @unique
  password  String
  service   String
  role      String   @default("user")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PublicFormSubmission {
  id              String               @id @default(uuid())
  firstName       String
  lastName        String
  email           String
  phone           String
  region          String
  adminDepartment String
  arrondissement  String
  village         String
  requestType     String
  description     String?
  status          String               @default("pending")
  documents       PublicFormDocument[] @relation
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
}

model PublicFormDocument {
  id        String               @id @default(uuid())
  formId    String
  form      PublicFormSubmission @relation(fields: [formId], references: [id])
  type      String
  fileUrl   String
  fileName  String
  fileType  String
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
}

enum Service {
  BUREAU_DU_COURRIER
  RECETTE_DEPARTEMENTALE_DES_DOMAINES
  CONSERVATION_FONCIERE
  SERVICE_DEPARTEMENTAL_DES_DOMAINES
  SERVICE_DEPARTEMENTAL_DES_AFFAIRES_FONCIERES
  SERVICE_DEPARTEMENTAL_DU_PATRIMOINE_DE_L_ETAT
  SERVICE_DEPARTEMENTAL_DU_CADASTRE
  AUTRES_SERVICES
  SECTION_PUBLIC
}
